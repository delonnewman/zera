; vim: ft=clojure
(ns
  ^{:doc "A light-weight Clojure Implmentation"}
  zera.core)

;(defmacro defn [x & xs]
;  (list 'def x (cons 'fn xs)))

(defmacro comment [& xs] nil)

(defmacro if
  ([pred conse] (list 'cond pred conse))
  ([pred conse alt] (list 'cond pred conse :else alt)))

(defmacro if-not
  ([pred conse] (list 'cond (list 'not pred) conse))
  ([pred conse alt] (list 'cond (list 'not pred) conse :else alt)))

(defmacro when [pred & acts]
  (list 'cond pred (cons 'do acts)))

(defmacro when-not [pred & acts]
  (list 'cond (list 'not pred) (cons 'do acts)))

(defmacro if-let
  ([bind then] (list 'if-let bind then nil))
  ([bind then else]
   (when-not (= (count bind) 2)
      (throw (js/Error. "Bindings must have exactly two elements")))
   (let [form (bind 0) test (bind 1), sym (gensym "temp__auto__")])
      (list 'let [sym test]
          (list 'if sym
                (list 'let [form sym] then) else))))

(defmacro when-let
  [bind & forms]
  (when-not (= (count bind) 2)
     (throw "Bindings must have exactly two elements"))
  (list 'let bind
        (cons 'when (cons (first bind) forms))))

(defmacro or
  ([] nil)
  ([a] a)
  ([& forms]
   (let [or* (first forms)]
     (list 'if or* or* (cons 'or (rest forms))))))

(defmacro and
  ([] true)
  ([a] a)
  ([& forms]
   (let [and* (first forms)]
     (list 'if and* (cons 'and (rest forms)) and*))))

(defmacro ->
  [x & forms]
  (loop [x* x, forms* forms]
    (if (empty? forms*)
      x*
      (let [form (first forms*)
            threaded (if (seq? form)
                       (list (first form) x* (first (rest form)))
                       (list form x*))]
        (recur threaded (rest forms*))))))

(defmacro ->>
  [x & forms]
  (loop [x* x, forms* forms]
    (if (empty? forms*)
      x*
      (let [form (first forms*)
            threaded (if (seq? form)
                       (list (first form) (first (rest form)) x*)
                       (list form x*))]
        (recur threaded (rest forms*))))))

(defmacro lazy-seq
  [& body]
  (list 'new zera.lang.LazySeq nil (cons 'fn (cons [] body))))

(def second (fn [x] (first (rest x))))

(defmacro defn
  [name & forms]
  (if-not (symbol? name)
          (throw (js/Error. (str "first argument of defn should be a symbol, got: " (prn-str name)))))
  (let [x (first forms)
        y (second forms)]
    (cond (and (string? x) (map? y))
      (list 'def (with-meta name (assoc y :doc x)) (cons 'fn (rest (rest forms))))
      (string? x)
      (list 'def (with-meta name {:doc x}) (cons 'fn (rest forms)))
      (map? x)
      (list 'def (with-meta name x) (cons 'fn (rest forms)))
      (or (vector? x) (list? x))
      (list 'def name (cons 'fn forms))
      :else
      (throw
        (js/Error.
          "after name defn expects a doc string, an arguments vector, or a list of bodies")))))

(defn concat
  ([] (lazy-seq nil))
  ([x] (lazy-seq x))
  ([x y]
   (lazy-seq
    (let [s (seq x)]
      (if s
          (cons (first s) (concat (rest s) y))
          y))))
  ([x y & zs]
    (echo zs)
    (let [cat (fn [xys zs]
                (lazy-seq
                 (let [xys (seq xys)]
                   (if xys
                       (cons (first xys) (cat (rest xys) zs))
                       (when zs
                             (cat (first zs) (rest zs)))))))]
      (cat (concat x y) zs))))

(defn pos? [x] (< 0 x))
(defn neg? [x] (> 0 x))
(defn zero? [x] (= 0 x))

(defn dorun
  ([coll]
   (when-let [s (seq coll)]
     (recur (next s))))
  ([n coll]
   (when (and (seq coll) (pos? n))
         (recur (dec n) (next coll)))))

(defn doall
  ([coll]
   (dorun coll)
   coll)
  ([n coll]
   (dorun n coll)
   coll))

(defn nthrest
  [coll n]
  (loop [m n xs coll] ; FIXME: binding to a variable of the same name causes the new variable to be nil
    (if-let [xs (and (pos? m) (seq xs))]
      (recur (dec m) (rest xs))
      xs)))

; TODO: implement doall and nthrest
(defn partition
  ([n coll]
   (partition n n coll))
  ([n step coll]
   (lazy-seq
    (when-let [s (seq coll)]
      (let [p (doall (take n s))]
        (when (= n (count p))
              (cons p (partition n step (nthrest s step))))))))
  ([n step pad coll]
   (lazy-seq
    (when-let [s (seq coll)]
      (let [p (doall (take n s))]
        (if (= n (count p))
            (cons p (partition n step pad (nthrest s step)))
            (list (take n (concat p pad)))))))))

(defn apply [f & args] (apply* f args))

(defn mapcat
  "Returns the result of applying concat to the result of applying map
  to f and colls.  Thus function f should return a collection. Returns
  a transducer when no collections are provided"
  {:added "1.0"
   :static true}
  [f coll]
  (apply* concat (apply map f coll)))

(defmacro dotimes
  [bindings & body]
  (if-not (and (vector? bindings) (= (count bindings) 2))
    (throw (js/Error. "bindings should be a vector with two elements")))
  (let [var (bindings 0)
        init (bindings 1)]
    (list 'loop [var 0]
          (cons 'when
                (cons (list '< var init)
                      (concat body [(list 'recur (list '+ var 1))])))
          init)))

(defmacro doseq
  [bindings & body]
  (if (not (and (vector? bindings) (= (count bindings) 2)))
    (throw (js/Error "bindings should be a vector with two elements")))
  (let [var (bindings 0)
        col (bindings 1)]
    (list 'let ['init col]
      (list 'loop [var '(first init) 'col-nm '(rest init)]
          (cons 'when
                (cons var
                      (concat body ['(recur (first col-nm) (rest col-nm))])))
          'init))))

(defn inc [x] (+ 1 x))
(defn dec [x] (- x 1))

(defn identity [x] x)
(defn constantly [x] (fn [] x))

(defn pt [tag & xs]
  (println (pr-str tag) (reduce str (map pr-str xs))))

(defmacro echo [x]
  (list 'pt (list 'quote x) x))

(def memoize
  (let [memo (atom {})]
    (fn [f]
      (fn [& args]
        (let [x (@memo args)]
          (if x x
            (do
              (swap! memo assoc args (apply f args))
              (@memo args))))))))

(defn zipmap
  [keys vals]
    (loop [map {}
           ks (seq keys)
           vs (seq vals)]
      (if (and ks vs)
        (recur (assoc map (first ks) (first vs))
               (next ks)
               (next vs))
        map)))

; TODO: implement partition, and mapcat
(defmacro condp
  [cmp value & rules]
  (cons 'cond (->> (partition 2 rules)
                   (mapcat (fn [r] [(if (= :else (first r)) :else (list cmp value (first r))) (second r)])))))

(defn class [x]
  (.class x))

(defn type? [x] (.-$zera$isType x))
(defn protocol? [x] (.-$zera$isProtocol x))

(defprotocol ^{:doc "This is a test"} Testing)
(deftype Test [name] Testing)
