; vim: ft=clojure
(load-file "src/zera/test.zera")
(ns test.zera.basic)
(refer 'zera.test)

;; equality
(is (= (eval 1) 1))
(is (= (eval "1") "1"))
(is (= (eval '(quote a)) 'a))
(is (= (eval '(quote test/a)) 'test/a))
(is (not= (eval '(quote a)) 'test/a))
(is (= (eval :a) :a))
(is (= (eval :test/a) :test/a))
(is (not= (eval :a) :test/a))
(is (= (eval '(quote (1 (2 3) (4 5)))) '(1 (2 3) (4 5))))
(is (= (eval [[1 2] 3 [4 5]]) [[1 2] 3 [4 5]]))
(is (= (eval {:a 1 :b 2}) {:a 1 :b 2}))
(is (= (eval {:a [1 2] :b {:c 1}}) {:a [1 2] :b {:c 1}}))
(is (= (eval #{:a [:b] {:c 1}}) #{:a [:b] {:c 1}}))

;; special forms
;; cond
(is (= (cond false 1) nil))
(is (= (cond false 1 :else 2) 2))
(is (= (cond nil 1) nil))
(is (= (cond nil 1 :else 2) 2))
(is (= (cond true 1 :else 2) 1))
(is (= (cond true 1) 1))
(is (= (cond 1 1 :else 2) 1))
(is (= (cond 1 1) 1))
(is (= (cond "a string" 1 :else 2) 1))
(is (= (cond "a string" 1) 1))
(is (= (cond '() 1 :else 2) 1))
(is (= (cond '() 1) 1))

;; fn
(is (= ((fn [])) nil))
(is (= ((fn [] 1)) 1))
(is (= ((fn [x] x) 1) 1))
(is (= ((fn [x y] [x y]) 1 2) [1 2]))
(is (= ((fn [x & ys] [x ys]) 1 2 3) [1 '(2 3)]))

;; def
(def x 1)
(is (= x 1))
(is (= test.zera.basic/x 1))

;; var
(is (= (var-get (var test.zera.basic/x)) 1))
(is (= (var-get #'test.zera.basic/x) 1))

;; set!
(def ^:dynamic y x)
(is (= y 1))
(set! y 2)
(is (= y 2))

;; do
(def x (atom false))
(is (= (do (reset! x true) 1) 1))
(is x)

;; let
(let [x 1, y 2, z (+ x y)]
  (is (= x 1))
  (is (= y 2))
  (is (= z 3)))

;; arithmetic
;; +
(is (= (+ nil) nil))
(is (= (+) 0))
(is (= (+ 1) 1))
(is (= (+ 1 2) 3))
(is (= (+ 1 2 3) 6))
(is (= (+ 1 2 3 4) 10))

;; -
(is (= (- 1) -1))
(is (= (- 1 2) -1))
(is (= (- 1 2 3) -4))
(is (= (- 1 2 3 4) -8))

;; *
(is (= (* nil) nil))
(is (= (*) 1))
(is (= (* 1) 1))
(is (= (* 1 2) 2))
(is (= (* 1 2 3) 6))
(is (= (* 1 2 3 4) 24))

;; /
(is (= (/ 1) 1))
(is (= (/ 1 2) 0.5))
(is (= (/ 1 2 3) (/ 1 6)))
(is (= (/ 1 2 3 4) (/ 1 24)))

;; predicates
(is (boolean? true))
(is (boolean? false))
(is (not (boolean? nil)))
(is (not (boolean? 1)))
(is (not (boolean? "Hey there!")))

(is (true? true))
(is (not (true? false)))
(is (not (true? nil)))
(is (not (true? 1)))
(is (not (true? "Hey there!")))

(is (false? false))
(is (not (false? true)))
(is (not (false? nil)))
(is (not (false? 1)))
(is (not (false? "Hey there!")))

(is (string? "Hey there!"))

(is (number? 3.1415))
(is (number? 10e6))
(is (number? 10000))
(is (not (integer? 3.1415)))
(is (integer? 10e6))
(is (integer? 10000))
