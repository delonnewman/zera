(ns test.zera.collections)
(load-file "src/zera/test.zera")
(refer 'zera.test)

; lists
(is (= (cons 1 nil) (cons 1 '())))
(is (= (cons 1 nil) (list 1)))
(is (= (cons 1 nil) '(1)))
(is (= (cons 1 (cons 2 (cons 3 '()))) '(1 2 3)))
(is (seq? '()))
(is (seq? (range 10)))
(is (seq? (map inc (range 10))))
(is (seqable? '()))
(is (list? '()))

(is (= (count '()) 0))
(is (= (count '(1)) 1))
(is (= (count '(1 2)) 2))

(is (= (next '()) nil))
(is (= (next '(1)) nil))
(is (= (next '(1 2)) '(2)))
(is (= (next '(1 2 3)) '(2 3)))

(is (= (rest '()) '()))
(is (= (rest '(1)) '()))
(is (= (rest '(1 2)) '(2)))
(is (= (rest '(1 2 3)) '(2 3)))
(is (not= (rest '(1 2 3)) '(1 3)))

(is (= (first '()) nil))
(is (= (first '(1)) 1))
(is (= (first '(1 2)) 1))

; vectors
(is (= (conj [] 1) [1]))
(is (= (conj [2] 1) [2 1])) 
(is (not (seq? [])))
(is (seqable? []))
(is (vector? []))
(is (= (nth [] 0) nil))
(is (= (nth [1 2 3] 0) 1))
(is (= (nth [1 2 3] 1) 2))
(is (= (nth [1 2 3] 2) 3))
(is (= (nth [1 2 3] 3) nil))
(is (= ([] 0) nil))
(is (= ([1 2 3] 0) 1))
(is (= ([1 2 3] 1) 2))
(is (= ([1 2 3] 2) 3))
(is (= ([1 2 3] 3) nil))
(is (contains? [1] 0))
(is (not (contains? [1] 1)))
(is (not (contains? [] 0)))
(is (contains? [1 2] 1))

; maps
(is (= {:a 1 :b 2} {:b 2 :a 1}))
(is (= {:a 1 :b 2 :c 3} {:b 2 :a 1 :c 3}))
(is (= (conj {} [:a 1]) {:a 1}))
(is (= (conj {:a 1} [:b 2]) {:a 1 :b 2}))
(is (not (seq? {})))
(is (seqable? {}))
(is (map? {}))
(is (= (assoc {} :a 1) {:a 1}))
(is (= (assoc {} :a 1 :b 2) {:a 1 :b 2}))
(is (= (assoc {:a 1} :b 2) {:a 1 :b 2}))
(is (= (dissoc {} :a) {}))
(is (= (dissoc {:a 1} :a) {}))
(is (= (dissoc {:a 1 :b 2} :a) {:b 2}))
(is (= (vals {}) '()))
(is (= (vals {:a 1 :b 2}) '(1 2)))
(is (= (keys {}) '()))
(is (= (keys {:a 1 :b 2}) '(:a :b)))
(is (= (get {:a 1} :a) 1))
(is (= (get {:a 1 :b 2} :a) 1))
(is (= (get {:a 1 :b 2} :b) 2))
(is (= (get {:a 1 :b 2} :c) nil))
(is (= (get {} :a) nil))
(is (= ({:a 1} :a) 1))
(is (= ({:a 1 :b 2} :a) 1))
(is (= ({:a 1 :b 2} :b) 2))
(is (= ({:a 1 :b 2} :c) nil))
(is (= ({} :a) nil))
(is (contains? {:a 1} :a))
(is (not (contains? {:a 1} :b)))
(is (not (contains? {} :b)))
(is (contains? {:a 1 :b 2} :a))
;(is (= (seq {:a 1 :b 2}) '([:a 1] [:b 2])))

; sets
(is (= #{1 2} #{2 1}))
(is (= #{1 2 3} #{2 1 3}))
(is (= (conj #{} 1) #{1}))
(is (= (conj #{1} 2) #{2 1}))
(is (set? #{}))
(is (not (seq? #{})))
(is (seqable? #{}))
(is (= (#{:a} :a) :a))
(is (= (#{:a :b} :a) :a))
(is (= (#{:a :b} :b) :b))
(is (= (#{:a :b} :c) nil))
(is (= (#{} :a) nil))
(is (contains? #{:a} :a))
(is (not (contains? #{:a} :b)))
(is (not (contains? #{} :b)))
(is (contains? #{:a :b} :a))
