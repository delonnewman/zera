#!/usr/bin/env zera
; vim: ft=clojure
(ns magbot)

;; For fetching media from jw.org feeds
;; The original version in Perl can be found here: https://raw.githubusercontent.com/delonnewman/magbot/master/magbot

;; (see https://8thlight.com/blog/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html)

(js.node/npm-install "js-yaml")

;; Dependencies
;; TODO: add :install directive that can be added to import, to indempotetly install npm packages
(js.node/import
  ["js-yaml" :as yaml]
  ["https" :as https]
  ["rss-parser" :as rss])

;; YAML
(defn <-yaml [yaml-str]
  (->ws (.safeLoad yaml yaml-str)))

(defn ->yaml [data]
  (.safeDump yaml (->js data)))

;; HTTP
(defn getstore [file url]
  (let [buffer (array)]
    (.get https url
          (fn [res]
            (.on res "data"
                 (fn [chunk]
                   ;(say "receiving chunk of " file " from " url)
                   (.push buffer chunk)))
            (.on res "error"
                 (fn [error]
                   (.error js/console error)))
            (.on res "end"
                 (fn []
                   (say "=> Done with: '" file "'")
                   (spit file (-> js.node/Buffer (.concat buffer)))))))))

;(getstore "http://google.com" "google.txt")
;(getstore "test.mp3" "https://download-a.akamaihd.net/files/media_magazines/9a/wp_E_201711_01.mp3")

;; filesystem operations
(def mkdir        js.node/mkdir)
(def file-exists? js.node/file-exists?)
(def slurp        js.node/slurp)
(def spit         js.node/spit)
(def basename     js.node/basename)
(def extname      js.node/extname)
(def dirname      js.node/dirname)

;; Config
(def HOME        (:HOME *env*))
(def CONFIG_FILE (str HOME "/.magbot/config"))
(def LOG_FILE    (str HOME "/.magbot/log"))
(def DEFAULTS
  {:mags
    {:w  {:E #{:epub :mp3}}
     :wp {:E #{:epub :mp3}}
     :g  {:E #{:epub :mp3}}}
   :dir
    {:audio (str HOME "/Podcasts")
     :pub   (str HOME "/Reading")}})

(def ROOT_URL "https://apps.jw.org/E_RSSMEDIAMAG")

(def MAGS_CODES
  {:g  "Awake!"
   :w  "Watchtower"
   :wp "Watchtower (Public Edition)"
   :ws "Watchtower (Simplified)"})

(def MAGS_DAYS
  {:g  ""
   :w  "15"
   :wp "01"})

(def FORMATS
  {:mp3  :audio
   :epub :pub
   :pdf  :pub
   :brl  :pub
   :rtf  :pub})

(def FORMATS_EXTENTIONS
  {:mp3  ".mp3"
   :epub ".epub"
   :pdf  ".pdf"
   :brl  ".brl"
   :rtf  ".rtf"})

(def EXTENTIONS_FORMATS
  (->> FORMATS_EXTENTIONS
       (map (fn [x] [(x 1) (x 0)]))
       (into (hash-map))))

(defn config []
  "read from config file"
  (let [dir (dirname CONFIG_FILE)]
    (unless (file-exists? dir) (mkdir dir))
    (if (file-exists? CONFIG_FILE)
      (<-yaml (slurp CONFIG_FILE))
      (do
        (spit CONFIG_FILE (->yaml DEFAULTS))
        (<-yaml (slurp CONFIG_FILE))))))

(def DIR  ((config) "dir"))
(def MAGS ((config) "mags"))

(defn root-dir [x]
  (let [fmt (:media/format x)
        type (or (FORMATS fmt) (FORMATS x))]
    (unless type (throw (js/Error (str "Cannot find root directory for: " (inspect x)))))
    (if (map? DIR)
      (DIR (name type))
      DIR)))

(defn times [n s]
  (let [buff (array)]
    (dotimes [i n]
      (.push buff s))
    (.join buff "")))

(defn pad-zeros [n &digits]
  (let [digits* (or (first digits) 2)
        m (.pow js/Math 10 (- digits* 1))]
    (if (>= n m)
      (str n)
      (let [nzeros (.-length (str n))]
        (str (times nzeros "0") n)))))

(comment
(is (= "05" (pad-zeros 5)))
(is (= "05" (pad-zeros 5 2)))
(is (= "10" (pad-zeros 10)))
)

(defn fmt-date [d]
  (str (.getUTCFullYear d) "-" (pad-zeros (inc (.getUTCMonth d))) "-" (pad-zeros (.getUTCDate d))))

(defn issue-dir [item feed-dir]
  (let [dir (fmt-date (:item/date item))]
    (str feed-dir "/" dir)))

(defn item-file [feed-dir item]
  (str (issue-dir item feed-dir) "/" (:item/file item)))

(defn feed [title desc url items]
  (let [fmt (keyword (.toLowerCase (last (.split desc " "))))]
    (unless (FORMATS fmt) (throw (js/Error. (str "Unknown format: " (inspect fmt) " from: " desc))))
    {:feed/title title
     :feed/desc desc
     :feed/url url
     :feed/items items
     :media/format fmt
     :magbot/tag :feed
     :feed/dir
      (let [dir (.replace title (js/RegExp. "(?:JW: )|[:\(\)]") "")]
        (str (root-dir fmt) "/" dir))}))

(defn item [title link date]
  {:item/title title
   :item/link link
   :item/date date
   :item/file (basename link)
   :magbot/tag :item
   :media/format
    (let [ext (extname link)]
      (EXTENTIONS_FORMATS ext))})

(defn feed-url [lang code format]
  (str ROOT_URL "?rln=" lang "&rmn=" code "&rfm=" format)) 

(defn feed-urls [mags]
  (map (fn [m]
         (feed-url (name (:mag/lang m)) (name (:mag/code m)) (name (:media/format m))))
       mags))

(defn mag
  ([code lang format]
   (mag code lang format nil))
  ([code lang format date]
   {:mag/code code
    :mag/lang lang
    :media/format format
    :magbot/tag :mag
    :mag/date date}))

(defmulti  show :magbot/tag)
(defmethod show :feed [f] (:feed/title f))
(defmethod show :item [i] (:item/title i))
(defmethod show :mag  [m]
  (let [d (:mag/date)]
    (if d
      (str (:mag/code m) (:mag/lang m) " " (:mag/format m) " " (fmt-date d))
      (str (:mag/code m) (:mag/lang m) " " (:mag/format m)))))

;(p MAGS)
(defn mags []
  (mapcat
   (fn [x]
     (mapcat
      (fn [y]
        (map
         (fn [z] (mag (keyword (x 0)) (keyword (y 0)) (keyword z)))
         (y 1)))
        (x 1)))
     MAGS))

;(p (mags))

(def channel
  (do
    (deftype Channel [state subcount]
      (send [this x]
        (swap! (.-state this) (fn [q] (conj q x))))
      (receive [this rcvr]
        (add-watch
          (.-state this)
          (str "receiver-" (inc (.-subcount this)))
          (fn [k ref old knew]
            (if (< (count old) (count knew))
              (rcvr (peek knew))
              (reset! (pop knew)))))
        this)
      (empty? [this] (empty? (.-state this))))

    (fn []
      (Channel. (atom (list)) 0))))

(defn send-> [ch x]
  (.send ch x))

(defmacro <-receive [ch &body]
  (list '.receive ch (cons 'fn (cons '[%] body))))

(defn parse-item [x]
  (item (.-title x) (.-link x) (js/Date. (.-isoDate x))))

(defn parse-feed [f]
  (let [f* (.-feed f)
        entries (.-entries f*)]
    (feed (.-title f*) (.-description f*) (.-feedUrl f*) (map parse-item entries))))

(def media (channel))
(<-receive media
  (let [root (root-dir (:media/format %))
        feed (:feed/dir %)]
    (say "Processing Feed: " (show %) "...")
    (unless (file-exists? root) (mkdir root))
    (unless (file-exists? (:feed/dir %)) (mkdir (:feed/dir %)))
    (doeach [item (:feed/items %)]
      (let [issue (issue-dir item feed)
            file (item-file feed item)]
        (unless (file-exists? issue) (mkdir issue))
        (unless (file-exists? file)
          (say "Fetching '" (:item/link item) "'...")
          (getstore file (:item/link item)))))))

(def feeds (channel))
(<-receive feeds
  (send-> media (parse-feed %)))

;; TODO: -main should be the last thing excecuted no matter where it's placed
(defn -main []
  (say "Checking for updates...")
  (doeach [url (feed-urls (mags))]
    (.parseURL
      rss
      url
      (fn [err parsed]
        (if err (.error js/console err))
        (send-> feeds parsed)))))
